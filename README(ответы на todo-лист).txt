1 Подключение к БД идет дважды ,в конструкторах моделей Post & User  ,тк оба они наследуютс¤ от класса соединени¤,что в принципе неправильно.
	Аггрегация здесь будет уместнее  нежели наследование,поэтому создаем инстанс класса соединения и инжектим его в нужный класс.
	таким образом избегаем множественных коннекшенов.
	
2. Посты создаютс¤ нормально. Сохраняется пост после редактировани¤ нормально,просто это не отображаетс¤ в форме редактирования,
	т.к. сначала создаетс¤ инстанс поста на основании инфы запрошенной из базы и он же передаетс¤ в шаблон.
	чтобы изменени¤ отражались достаточно из переменных пост-запроса извлечь значени¤ заголовка и тела поста
	 и присвоить их пол¤м инстанса поста. (  $post->param['name'] = $_POST['name']; ) перед передачей во вьюшку.
	 
3.ѕост после удалени¤ показываетс¤ по схожей причине - сначала запрашиваетс¤ список,потом прокидываетс¤ во вью без учета факта удалени¤ некоторого поста.
	достаточно абзацы кода с удалением поста и получением списка постов поменять местами,чтобы список запрашивался после удаления из базы.
	
4.Модель  Post.php,строки 79 -82

	//-------------code---------------------------------
	foreach($res as $item)
    {
      $return[] = new self($item['id']);
    }	
	//-------------/code---------------------------------
	непонятно зачем это нужно. по сути у вас уже есть все данные в виде массивов,
	достаточно просто сделать гидрацию данных в объекты Post,
	 а не гонять конструктор ,который  лезет в базу за каждым постом,
	 или просто юзать PDOStatement::fetchAll с константой FETCH_CLASS
	 
5.CRUD-операции перенес в родительский компонент Model(по сути примитивный ActiveRecord)	
	в классе постов оставил специфичные данные и операции.

	 